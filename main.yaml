# Example input via AWS CLI:
#  aws cloudformation update-stack --template-body file://mng-rate5.yaml  --capabilities CAPABILITY_IAM --stack-name mng-rate5-1 --parameters ParameterKey=ClusterName,ParameterValue=master-of-puppets-1 ParameterKey=ManagedNodeGroup,ParameterValue=mng3 ParameterKey=IncreaseByDesiredSize,ParameterValue=4 ParameterKey=DecreaseByDesiredSize,ParameterValue=0 ParameterKey=MorningCronSchedule,ParameterValue="cron(40 16 ? * MON-SUN *)" ParameterKey=EveningCronSchedule,ParameterValue="cron(43 16 ? * MON-SUN *)"

# A script to increase the MNG in the morning and decrease in the evening via event bridge -> lambda -> eks 'UpdateNodegroupConfig' API call
# 2023.08.09

Parameters:
  ClusterName:
    Type: String
    Description: Enter EKS cluster name
  ManagedNodeGroup:
    Type: String
    Description: Enter managed node group name
  IncreaseByDesiredSize:
    Type: String
    Description: Set the managed node group desired size increase
  DecreaseByDesiredSize:
    Type: String
    Description: Set the managed node group desired size decrease
  MorningCronSchedule:
    Type: String
    Description: Set the custom cron schedule in UTC time. Example "00 09 ? * MON-SUN *" which is "At 09:00 AM, Monday through Sunday" https://crontab.cronhub.io/
  EveningCronSchedule:
    Type: String
    Description: Set the custom cron schedule in UTC time. Example "00 18 ? * MON-SUN *" which is "At 06:00 PM, Monday through Sunday" https://crontab.cronhub.io/


Resources:
  InvokeMorningRule: 
    Type: AWS::Events::Rule
    Properties: 
      Description: "InvokeMorningRule"
      # ScheduleExpression: "cron(39 14 ? * MON-FRI *)"
      ScheduleExpression: !Ref MorningCronSchedule
      State: "ENABLED"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "IncreaseManagedNodeGroupDesiredSize"
              - "Arn"
          Id: "TargetFunctionV1"
  PermissionForEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !Ref "IncreaseManagedNodeGroupDesiredSize"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "InvokeMorningRule"
          - "Arn"

  InvokeEveningRule: 
    Type: AWS::Events::Rule
    Properties: 
      Description: "InvokeEveningRule"
      # ScheduleExpression: "cron(39 14 ? * MON-FRI *)"
      ScheduleExpression: !Ref EveningCronSchedule
      State: "ENABLED"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "DecreaseManagedNodeGroupDesiredSize"
              - "Arn"
          Id: "TargetFunctionV1"
  PermissionForEventsToInvokeLambda2: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !Ref "DecreaseManagedNodeGroupDesiredSize"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "InvokeEveningRule"
          - "Arn"




  IncreaseManagedNodeGroupDesiredSize:
    DependsOn: LambdaRole
    Type: AWS::Lambda::Function
    Properties:
      Description: Function for increasing the MNG's desired size
      Handler: index.lambda_handler
      Runtime: python3.11
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          ClusterName:
            Ref: ClusterName
          ManagedNodeGroup:
            Ref: ManagedNodeGroup
          IncreaseByDesiredSize:
            Ref: IncreaseByDesiredSize
      Code:
        ZipFile: |
          import json
          import boto3
          import os

          def lambda_handler(event, context):
              print('Received request:\n%s' % json.dumps(event))

              try:
                  eks_client = boto3.client('eks')

                  reponse = eks_client.update_nodegroup_config(
                  clusterName=os.environ['ClusterName'],
                  nodegroupName=os.environ['ManagedNodeGroup'],
                  scalingConfig={
                      'minSize': 0,
                      'maxSize': 10,
                      'desiredSize': int(os.environ['IncreaseByDesiredSize'])
                  }
              )

              except Exception as e:
                  print(e)
                  raise

  DecreaseManagedNodeGroupDesiredSize:
    DependsOn: LambdaRole
    Type: AWS::Lambda::Function
    Properties:
      Description: Function for increasing the MNG's desired size
      Handler: index.lambda_handler
      Runtime: python3.11
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          ClusterName:
            Ref: ClusterName
          ManagedNodeGroup:
            Ref: ManagedNodeGroup
          DecreaseByDesiredSize:
            Ref: DecreaseByDesiredSize
      Code:
        ZipFile: |
          import json
          import boto3
          import os

          def lambda_handler(event, context):
              print('Received request:\n%s' % json.dumps(event))

              try:
                  eks_client = boto3.client('eks')

                  reponse = eks_client.update_nodegroup_config(
                  clusterName=os.environ['ClusterName'],
                  nodegroupName=os.environ['ManagedNodeGroup'],
                  scalingConfig={
                      'minSize': 0,
                      'maxSize': 10,
                      'desiredSize': int(os.environ['DecreaseByDesiredSize'])
                  }
              )

              except Exception as e:
                  print(e)
                  raise

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Description: Execution role with permission to add, list, or remove a tag for a customer managed policy
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - "eks:UpdateNodegroupConfig"
                Resource:
                  - '*'
                Effect: Allow
          PolicyName: update-mng-policy
      Path: "/"
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
            Effect: Allow
        Version: '2012-10-17'
